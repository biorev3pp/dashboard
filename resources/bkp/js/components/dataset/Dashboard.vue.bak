<template>
    <div>
        <div>
            <div class="table-responsive border-bottom">
                <dataset-count :total="totalNumberOfRecords" :activeDataset="form.dataset"></dataset-count>
            </div>
            <div class="filterbox">
                <div class="row mx-0 mb-2">
                    <div class="col-md-3 pl-0">
                        <div class="input-group in-search-group">
                            <input type="text" class="form-control" v-model="form.textSearch" placeholder="Search by name, email or company">
                            <div class="input-group-append">
                                <button class="btn" type="button" @click="getFilterData">
                                    <i class="bi bi-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-12 p-0">
                        <span v-for="(filter,index) in form.filterConditionsArray" :key="'filter-'+filter.conditionText+'-'+filter.formula+'-'+filter.textCondition" class="filter-btns" v-show="filter_expand">
                            <span v-title="filter.textConditionLabel"  class="text-primary mx-1 pointer-hand" @click="showFilterDetails(filter, index)"> {{ filter.textConditionLabel }}</span>
                            <i class="bi bi-x pr-1  pointer-hand" @click="removeFilter(index)"></i>
                        </span>
                        <a href="javascript:void(0)" class="btn btn-outline-primary btn-sm" @click="showView=false; showFilter()"><i class="bi bi-plus"></i> Add filter</a>
                        <div class="stage-select-box selection-box" v-show="filter">
                            <i class="bi bi-x close" @click="filter = false; showView = false"></i>
                            <label class="control-label text-uppercase">Select Filters</label>
                            <div class="form-group" v-show="filter">
                                <v-select label="filter" :options="filterItems" @input="showFilterOption" v-model="form.filter"></v-select>
                            </div>
                            <div class="row" v-show="filterEmail">
                                <div class="col-md-12 pr-1">
                                    <input type="radio" name="outreach-email" v-model="queryType" value="all" class="btn-check" :id="form.filter.filter_key +'-email-all'" autocomplete="off">
                                    <label class="btn btn-primary" :for="form.filter.filter_key +'-email-all'">All</label>
                                    <input type="radio" name="outreach-email" v-model="queryType" value="any" class="btn-check" :id="form.filter.filter_key +'-email-any'" autocomplete="off">
                                    <label class="btn btn-primary" :for="form.filter.filter_key +'-email-any'">Any</label>
                                    <br>
                                    <span v-for="filterOption in filterOptions" :key="'select-'+filterOption" :value="filterOption">
                                        <input type="checkbox" v-model="searchfilterEmailMoreOption" :id="form.filter.filter_key +'-'+filterOption" :value="filterOption"/>
                                        <label class="" :for="form.filter.filter_key +'-'+filterOption">{{ filterOption }}</label><br>
                                    </span>
                                </div>
                            </div>
                            <div class="row" v-show="filterPhone">
                                <div class="col-md-12 pr-1">
                                    <input type="radio" name="outreach-mobile" v-model="queryType" value="all" class="btn-check" :id="form.filter.filter_key +'-phone-all'" autocomplete="off">
                                    <label class="btn btn-primary" :for="form.filter.filter_key +'-phone-all'">All</label>
                                    <input type="radio" name="outreach-mobile" v-model="queryType" value="any" class="btn-check" :id="form.filter.filter_key +'-phone-any'" autocomplete="off">
                                    <label class="btn btn-primary" :for="form.filter.filter_key +'-phone-any'">Any</label>
                                    <br>
                                    <span v-for="filterOption in filterOptions" :key="'select-'+filterOption" :value="filterOption">
                                        <input type="checkbox" v-model="searchfilterPhoneMoreOption" :id="form.filter.filter_key +'--'+filterOption" :value="filterOption"/>
                                        <label class="" :for="form.filter.filter_key +'--'+filterOption">{{ filterOption }}</label><br>
                                    </span>
                                </div>
                            </div>
                            <div class="row" v-show="!filterEmail && !filterPhone">
                                <div class="col-md-4 pr-1"> 
                                    <select  class="form-control" v-model="form.filterOption" v-if="(filterInput || filterDropdown) && (filter != null)">
                                        <option v-for="filterOption in filterOptions" :key="'select-'+filterOption" :value="filterOption">{{ filterOption }}</option>
                                    </select>
                                </div>
                                <div class="col-md-8 pl-1">
                                    <div v-show="filterInput">
                                        <input type="text" class="form-control" v-model="form.filterText" placeholder="">
                                    </div>
                                    <div v-show="filterDropdown">
                                        <div class="selectedOptions">
                                            <span class="badge bg-primary text-white p-2 m-1 pointer-hand" v-for="(option, index) in selectedOptions" :key="'option-'+index" @click="removeSelectedOption(index)">{{ option }} </span> 
                                        </div>
                                        <select class="form-control" v-model="form.dropdown" @change="getSelectedOptions">
                                            <option v-for="select in selects" :key="'select-'+select.oid" :value="select.oid">{{ select.stage }}</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div v-show="filterDateRange">
                                <date-range-picker ref="picker" :locale-data="{ firstDay: 1, format: 'dd-mm-yyyy HH:mm:ss' }" :timePicker24Hour="false" :showWeekNumbers="true" :showDropdowns="true"  :dateFormat="dateFormat" :autoApply="false" v-model="form.dateRange" >
                                    <template v-slot:input="picker">
                                        <span v-if="form.dateRange.startDate">
                                            {{ picker.startDate | setusdate }} - {{ picker.endDate | setusdate }}
                                        </span>
                                        <span v-else>
                                            Select Date Range
                                        </span>
                                    </template>
                                </date-range-picker>
                            </div>
                            <br>
                            <button v-show="filterBtn" v-if="filterInput || filterDropdown || filterDateRange || filterEmail || filterPhone" class="btn btn-primary btn-sm" @click="createFilter">Done</button>
                            <button v-show="!filterBtn" v-if="filterInput || filterDropdown || filterDateRange || filterEmail || filterPhone" class="btn btn-primary btn-sm" @click="updateFilter">Update</button>
                        </div>
                        <span class="text-secondary cursor-pointer ml-1" v-if="filter_expand" @click="filter_expand = false">Hide Filters</span>
                        <span class="text-secondary cursor-pointer ml-1" v-else @click="filter_expand = true">{{ form.filterConditionsArray.length }} Hidden Filters</span>
                    </div>
                    <div class="col-md-3 col-12 p-0 text-right pt-2">
                        <img :src="loader_url" alt="Loading..." v-show="loader">
                        <span v-if="recordContainer.length >= 1"> Selected  <b>{{ recordContainer.length | freeNumber }}</b> of  </span>
                        <span v-else>Showing</span>
                        <span><b>{{ totalNumberOfRecords | freeNumber }}</b> Results</span>
                    </div>
                </div>
            </div> 
            <div class="divtable border-top">
                <div class="divthead">
                    <div class="divthead-row">
                        <div class="divthead-elem wf-45 text-center">
                            <input type="checkbox" name="" id="check-all" value="0" aria-label="...">
                        </div>
                        <div class="divthead-elem wf-125">
                            Dataset                        
                        </div>
                        <div class="divthead-elem mwf-200">
                            Name                            
                        </div>
                        <div class="divthead-elem wf-175">
                            Stage                        
                        </div>
                        <div class="divthead-elem wf-150">
                            Call Stack  
                        </div>
                        <div class="divthead-elem wf-220">
                            Email Stack                   
                        </div>
                        <div class="divthead-elem wf-150">
                            Time Stack
                        </div>
                    </div>
                </div>
                <div class="divtbody  fit-divt-content2">
                    <div class="divtbody-row" v-for="record in records.data" :key="'dsg-'+record.id" :class="[(active_row.id == record.record_id)?'expended':'']">
                        <div class="divtbody-elem  wf-45 text-center">
                            <div class="form-check">
                                <input :id="'record-'+record.id" class="form-check-input me-1" type="checkbox" :value="record.id">
                            </div>
                        </div>
                        <div class="divtbody-elem  wf-125">
                            <dataset-group :a="record.totalemail_count" :b="record.totalclick_count" :c="record.totalopen_count" :d="(record.totalcall)?record.totalcall.totalcall:0" :e="(record.totalrcall_count)?record.totalrcall_count:0" :f="(record.totalwcall)?record.totalwcall.totalwcall:0" :g="(record.totalwrcall_count)?record.totalwrcall_count:0" :h="record.stage"></dataset-group>
                        </div>
                        <div class="divtbody-elem mwf-200">
                            <router-link target="_blank" :to="'prospects/' + record.record_id" class=""><b>{{ record.first_name }} {{ record.last_name }} </b></router-link>
                            <br>
                            <small class="fw-500" v-title="record.designation" v-if="record.designation">{{ record.designation }}  in </small> 
                            <span class="company-sm" v-title="record.company" v-if="record.company">{{ record.company }}</span>
                        </div>
                        <div class="divtbody-elem wf-175">
                            <span v-if="record.stage_name" :class="record.stage_css" v-title="record.stage_name">
                                {{ record.stage_name }}
                            </span>
                            <span class="no-stage" v-else>No Stage</span>
                        </div>
                        <div class="divtbody-elem wf-150">
                            <span class="stack-box call-log">
                                <label for="call">
                                    <i class="bi bi-telephone-fill"></i>
                                </label>
                                <call-log :calldata="record.calllogs" :title="MumberFormated(record.otherPhones)" :label="'B'"></call-log>
                                <call-log :calldata="record.calllogs" :title="MumberFormated(record.mobilePhones)" :label="'M'"></call-log>
                                <call-log :calldata="record.calllogs" :title="MumberFormated(record.workPhones)" :label="'HQ'"></call-log>
                            </span>
                        </div>
                        <div class="divtbody-elem wf-220">
                            <span class="stack-box email-log">
                                <label for="email">
                                    <i class="bi bi-envelope-fill text-primary"></i>
                                </label>
                                <email-log :te="record.totalemail_count" :tc="record.totalclick_count" :to="record.totalopen_count" :tb="record.totalbounced_count" :tr="record.totalbounced_count" :title="record.emails?record.emails:record.email" :label="'B'"></email-log>
                                <email-log :te="record.totalemail_count" :tc="record.totalclick_count" :to="record.totalopen_count" :tb="record.totalbounced_count" :tr="record.totalbounced_count" :title="record.supplemental_email?record.supplemental_email:''" :label="'S'"></email-log>
                            </span>
                        </div>                             
                        <div class="divtbody-elem  wf-150">
                            <span class="stack-box">
                                <label for="email">
                                    <i class="bi bi-clock-fill text-success"></i>
                                </label>
                                <span :class="(record.outreach_created_at)?'active':''" v-title="myDateFormat('Created', record.outreach_created_at)">C</span>
                                <span :class="(record.outreach_touched_at)?'active':''" v-title="myDateFormat('Touched', record.outreach_touched_at)">T</span>
                                <span :class="(record.last_update_at)?'active':''" v-title="myDateFormat('Updated', record.last_update_at)">U</span>
                                <span :class="(record.last_agent_dispo_time)?'active':''" v-title="myDateFormat('Last Called ', record.last_agent_dispo_time)">CT</span>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="divtfoot border-top">
                    <div class="text-center py-1">
                        <span class="form-inline d-inline-flex mr-3">
                            <label class="form-control  pr-0 border-none"> Show : </label>
                            <select class="form-control" v-model="form.recordPerPage" @change="getDatasets">
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </span>
                        <pagination :limit="5" :data="records" @pagination-change-page="getDatasets"></pagination>
                    </div>                    
                </div>
            </div>
        </div>
    </div>
</template>
<script>
import DatasetGroup from './Group';
import CallLog from './CallLog';
import EmailLog from './EmailLog';
import DatasetCount from './Counts';
import DateRangePicker from 'vue2-daterange-picker';
import 'vue2-daterange-picker/dist/vue2-daterange-picker.css';
import { ToggleButton } from 'vue-js-toggle-button';
import 'vue-select/dist/vue-select.css';

export default {
    components:{CallLog, EmailLog, DatasetGroup, DatasetCount, DateRangePicker, ToggleButton,},
    data() {
        return {
            bypassFIlterKey : '',
            bypassFIlter : '',
            filter_expand:true,
            loader:false,
            step:0,
            records:{},
            totalRecords : 0,
            active_row:'',
            searchfilterEmailMoreOption:[],
            searchfilterPhoneMoreOption:[],
            queryType : "",
            form: new Form({
                sortType:'outreach_touched_at',
                sortBy:'desc',
                recordPerPage:20,
                pageno:1,
                datatset:'',

                dateRange:{},
                outreach:1,
                activecampaign:0,
                five9:0,
                page:1,
                stage:'all',
                textSearch:'',
                filter:'',
                filterType:'',
                dropdown: '',
                filterOption:'is',
                filterEmailMoreOption : [],
                filterText:'',
                filterConditionsArray : [],
                viewName : '',
                sharing : 'private',
            }),
            showView : false, //control appearance of view controls
            loader_url: '/img/spinner.gif',
            totalNumberOfRecords:'',
            recordContainer:'',
            filter : false,
            filterEmail : false,
            filterPhone : false,
            filterInput : false,
            filterDropdown : false,
            filterDateRange : false,
            filterOptions : [],
            selects : [],
            filterConditionsObject : {},            
            filterConditionsArrayOld : [],
            filterBtn : true,
            filterUpdateBtn: false,
            selectedOptions : [],
            selectedOptionsId : [],
            filterItemsIds : [],
        }
    },
    filters: {
           },
    computed: {
        datasets() {
            return this.$store.getters.datasets
        },
        filterItems() {
            return this.$store.getters.datasetFilter
        },
    },
    methods: {
        showFilter(){
            // this.searchfilterEmailMoreOption = []
            // this.searchfilterPhoneMoreOption = []
            this.filterBtn = true
            this.filterInput = false
            this.filterDropdown = false
            this.filterDateRange = false
            this.filterEmail = false
            this.filterPhone = false
            this.filter = true
            /* axios.get('/api/get-all-filter-dataset').then((response) => {
                this.filterItems = response.data.items
                this.filterItemsAll = response.data.items
                this.filter = true
                var filterItemsIds = this.filterItemsIds
                //remove filter item form filter-item array
                if(filterItemsIds.length > 0){
                    this.filterItems = this.filterItems.filter(function(e) {
                        if(filterItemsIds.indexOf(e.id) == -1){
                            return e
                        }
                    })
                }
            }); */
        },
        showFilterOption(){
            if(this.form.filter == null){
                this.filterInput = false;
                this.filterDropdown = false;
                this.filterDateRange = false;
            }else{
                this.filterOptions = this.form.filter.filter_option.split(',')
                if(this.form.filter.filter_type == 'textbox'){
                    this.filterInput = true;
                    this.filterDropdown = false;
                    this.filterDateRange = false;
                    this.filterEmail = false
                    var oldData = this.form.filterConditionsArray.filter(function(e){
                        return ((e.type == filterType) && (e.condition == filterKey))
                    })
                    if(oldData.length > 0){                        
                        this.showFilterDetails(oldData[0], 1)
                    }
                }
                if(this.form.filter.filter_type == 'calendar'){
                    this.filterInput = false;
                    this.filterDropdown = false;
                    this.filterDateRange = true;
                    this.filterEmail = false
                }
                if(this.form.filter.filter_type == 'dropdown'){                    
                    var filterType = this.form.filter.filter_type
                    var filterKey = this.form.filter.filter_key
                    var oldData = this.form.filterConditionsArray.filter(function(e){
                        return ((e.type == filterType) && (e.condition == filterKey))
                    })
                    if(oldData.length > 0){                        
                        this.showFilterDetails(oldData[0], 1)
                    }
                    this.selects = []
                    this.filterInput = false;
                    this.filterDropdown = true;
                    this.filterDateRange = false;
                    this.filterEmail = false
                    let api = this.form.filter.api
                    axios.get(api).then((response) => {
                        this.selects = response.data.results;
                    });
                }
                if(this.form.filter.filter_type == 'email'){
                    this.form.searchfilterEmailMoreOption = []
                    this.filterInput = false
                    this.filterDropdown = false
                    this.filterDateRange = false
                    this.filterEmail = true
                    this.filterPhone = false
                }
                if(this.form.filter.filter_type == 'phone'){
                    this.form.searchfilterPhoneMoreOption = []
                    this.filterInput = false
                    this.filterDropdown = false
                    this.filterDateRange = false
                    this.filterEmail = false
                    this.filterPhone = true
                }
            }
        },
        setfilterEmailMoreOptionAll(data){   
            this.queryType = 'all'           
            this.searchfilterEmailMoreOption = []
            for(var i = 0; i < this.filterOptions.length; i++){
                this.searchfilterEmailMoreOption[i] = this.filterOptions[i]
            }
        },
        setfilterEmailMoreOptionAny(data){   
            this.queryType = 'any'         
            this.searchfilterEmailMoreOption = []
            for(var i = 0; i < this.filterOptions.length; i++){
                this.searchfilterEmailMoreOption[i] = this.filterOptions[i]
            }
        },
        setfilterPhoneMoreOptionAll(data){   
            this.queryType = 'all'           
            this.searchfilterPhoneMoreOption = []
            for(var i = 0; i < this.filterOptions.length; i++){
                this.searchfilterPhoneMoreOption[i] = this.filterOptions[i]
            }
        },
        setfilterPhoneMoreOptionAll(data){   
            this.queryType = 'any'         
            this.searchfilterPhoneMoreOption = []
            for(var i = 0; i < this.filterOptions.length; i++){
                this.searchfilterPhoneMoreOption[i] = this.filterOptions[i]
            }
        },
        removeSelectedOption(index){
            this.selectedOptions.splice(index,1)
            this.selectedOptionsId.splice(index,1)
        },
        getSelectedOptions(){            
            var id = this.form.dropdown
            var data = this.selects.filter(function(e){
                return e.oid == id
            })
            if(this.selectedOptions.indexOf(data[0].stage) == -1){
                this.selectedOptions.push(data[0].stage)
                this.selectedOptionsId.push(data[0].oid)
            }
        },
        createFilter(){   
            var oldformula = ''        
            if(this.form.filter.filter_type == 'textbox'){
                var textCondition = this.form.filterText  
                var textConditionLabel =this.form.filter.filter +' '+ this.form.filterOption +' '+ this.form.filterText
                var api = '';
                oldformula = this.form.filter.filter_option
            }
            
            if(this.form.filter.filter_type == 'calendar'){
                    var endDate = JSON.stringify(this.form.dateRange.endDate).slice(1, -1)
                    var startDate = JSON.stringify(this.form.dateRange.startDate).slice(1, -1)
                    var textCondition = startDate+'--'+endDate
                    var textConditionLabel = this.form.filter.filter +' '+ startDate.substring(0,10)+ ' to ' + endDate.substring(0,10)
                    var api = '';
                    oldformula = this.form.filter.filter_option
            }
            if(this.form.filter.filter_type == 'dropdown'){

                var formdropdown = this.form.dropdown
                var textCondition = this.selectedOptionsId.join(',')
                var textConditionLabel = this.form.filter.filter +' '+ this.form.filterOption +' ' + this.selectedOptions.join(', ')
                var api = this.form.filter.api
                oldformula = this.form.filter.filter_option
            }
            if(this.form.filter.filter_type == 'email'){
                var textCondition = this.searchfilterEmailMoreOption.join(", ")

                if(this.queryType == 'all'){
                    var textConditionLabel = this.form.filter.filter + " : "  + " : " + this.searchfilterEmailMoreOption.join(", and ")
                }else{
                    var textConditionLabel = this.form.filter.filter + " : "  + " : " + this.searchfilterEmailMoreOption.join(", or ")
                }
                
                oldformula = this.form.filter.filter_option
                this.form.filterOption = this.queryType

                this.searchfilterEmailMoreOption = []
            }
            
            if(this.form.filter.filter_type == 'phone'){
                var textCondition = this.searchfilterPhoneMoreOption.join(", ")

                if(this.queryType == 'all'){
                    var textConditionLabel = this.form.filter.filter + " : "  + " : " + this.searchfilterEmailMoreOption.join(", and ")
                }else{
                    var textConditionLabel = this.form.filter.filter + " : "  + " : " + this.searchfilterEmailMoreOption.join(", or ")
                }

                oldformula = this.form.filter.filter_option
                this.form.filterOption = this.queryType

                this.searchfilterPhoneMoreOption = []
                this.queryType = ""
            }
            this.form.filterConditionsArray[this.form.filterConditionsArray.length] = {
                'type' : this.form.filter.filter_type,
                'condition' : this.form.filter.filter_key,
                'conditionText' : this.form.filter.filter,
                'formula' : this.form.filterOption,
                'textCondition' : textCondition ,
                'oldformula' : oldformula,
                'textConditionLabel' : textConditionLabel,
                'api' : api,
            }                    
            this.form.filterText = ''
            this.form.filter = ''
            this.form.dropdown = ''
            this.filter = false
            this.filterEmail = false
            this.filterPhone = false
            this.filterInput = false
            this.filterDropdown = false
            this.filterDateRange = false
            this.form.filter = ''
            this.getDatasets(1)
        },        
        showFilterDetails(filter, index){
            if(filter.type == 'textbox'){
                this.form.filter = filter.condition
                this.form.filterOption = filter.formula
                this.form.filterText = filter.textCondition
                this.filterOptions = []
                this.filterOptions = filter.oldformula.split(",")
                this.filter = true
                this.filterInput = true
                this.filterDropdown = false
                this.filterDateRange = false
                this.filterEmail = false
                this.filterPhone = false
            }
            if(filter.type == 'dropdown'){
                this.form.filter = filter.condition
                this.form.filterOption = filter.formula
                this.form.dropdown = filter.textCondition
                this.filterOptions = []
                this.filterOptions = filter.oldformula.split(",")
                this.filter = true
                this.filterInput = false
                this.filterDropdown = true
                this.filterDateRange = false
                let api = filter.api
                axios.get(api).then((response) => {
                    this.selects = response.data.results;
                });
                this.selectedOptions = []
                this.selectedOptionsId = []
                var newRecords = filter.textCondition.split(",")
                for(var i = 0; i <= newRecords.length; i++){
                    var newStage = this.selects.filter(function(e){
                        return e.oid == newRecords[i]
                    })
                    if(newStage.length > 0){
                        this.selectedOptionsId.push(newRecords[i])
                        this.selectedOptions.push(newStage[0].stage)
                    }
                }
                this.filterEmail = false
                this.filterPhone = false
            }
            if(filter.type == 'calendar'){
                this.form.filter = filter.condition
                this.form.filterOption = filter.formula
                this.form.filterText = filter.textCondition
                this.filterOptions = []
                this.filterOptions = filter.oldformula.split(",")
                this.filter = true
                this.filterInput = false
                this.filterDropdown = false
                this.filterDateRange = true
                this.filterEmail = false
                this.filterPhone = false
            }
            if(filter.type == 'email'){
                this.form.filter = filter.conditionText
                this.form.filterOption = filter.formula
                this.queryType = filter.formula
                this.form.filterText = filter.textCondition
                
                this.bypassFIlterKey = filter.condition
                this.bypassFIlter = filter.conditionText
                this.queryType = filter.formula
                this.filterOptions = []
                this.filterOptions = filter.oldformula.split(",")
                this.searchfilterEmailMoreOption = filter.textCondition.replace(/\s+/g, '').split(",")

                this.filter = true
                this.filterInput = false
                this.filterDropdown = false
                this.filterDateRange = false
                this.filterEmail = true
                this.filterPhone = false
            }
            if(filter.type == 'phone'){
                this.form.filter = filter.conditionText
                this.form.filterOption = filter.formula
                this.queryType = filter.formula
                this.form.filterText = filter.textCondition
                
                this.bypassFIlterKey = filter.condition
                this.bypassFIlter = filter.conditionText
                this.queryType = filter.formula
                this.filterOptions = []
                this.filterOptions = filter.oldformula.split(",")
                this.searchfilterPhoneMoreOption = filter.textCondition.replace(/\s+/g, '').split(",")

                this.filter = true
                this.filterInput = false
                this.filterDropdown = false
                this.filterDateRange = false
                this.filterEmail = false
                this.filterPhone = true
            }
            
            this.filterUpdateBtn = true
            this.filterBtn = false            
        },
        updateFilter(){
            for(const i in this.form.filterConditionsArray){
                if(this.form.filterConditionsArray[i]["condition"] == this.form.filter || this.form.filterConditionsArray[i]["condition"] == this.bypassFIlterKey){
                    
                    if(this.form.filterConditionsArray[i]["type"] == "textbox"){
                        this.form.filterConditionsArray[i]["formula"] = this.form.filterOption
                        this.form.filterConditionsArray[i]["textCondition"] = this.form.filterText
                        
                        this.form.filterConditionsArray[i]['textConditionLabel'] = this.form.filter.charAt(0).toUpperCase()+ this.form.filter.slice(1) +' '+ this.form.filterOption +' '+ this.form.filterText
                        
                    } else if(this.form.filterConditionsArray[i]["type"] == "dropdown"){

                        this.form.filterConditionsArray[i]["formula"] = this.form.filterOption
                        this.form.filterConditionsArray[i]["textCondition"] = this.selectedOptionsId.join(',')            
                        this.form.filterConditionsArray[i]['textConditionLabel'] = this.form.filter +' '+ this.form.filterOption +' '+ this.selectedOptions.join(', ')
                    } else if(this.form.filterConditionsArray[i]["type"] == "calendar"){

                        this.form.filterConditionsArray[i]["formula"] = this.form.filterOption
                        this.form.filterConditionsArray[i]["textCondition"] = this.form.filterText
                        var endDate = JSON.stringify(this.form.dateRange.endDate).slice(1, -1)
                        var startDate = JSON.stringify(this.form.dateRange.startDate).slice(1, -1)
                        this.form.filterConditionsArray[i]['textCondition'] = startDate+'--'+endDate
                        this.form.filterConditionsArray[i]['textConditionLabel'] = startDate.substring(0,10) 

                    } else if(this.form.filterConditionsArray[i]["type"] == "email"){
                        this.form.filterConditionsArray[i]["formula"] = this.queryType
                        this.form.filterConditionsArray[i]["textCondition"] = this.searchfilterEmailMoreOption.join(", ")

                        if(this.queryType == 'all'){
                            this.form.filterConditionsArray[i]['textConditionLabel'] = this.form.filter + " : " + " : " + this.searchfilterEmailMoreOption.join(",  and ")
                        }else{
                            this.form.filterConditionsArray[i]['textConditionLabel'] = this.form.filter + " : " + " : " + this.searchfilterEmailMoreOption.join(",  or ")
                        }

                        this.searchfilterPhoneMoreOption = []
                        this.queryType = ""

                    } else if(this.form.filterConditionsArray[i]["type"] == "phone"){
                        this.form.filterConditionsArray[i]["formula"] = this.queryType
                        this.form.filterConditionsArray[i]["textCondition"] = this.searchfilterEmailMoreOption.join(", ")

                        if(this.queryType == 'all'){
                            this.form.filterConditionsArray[i]['textConditionLabel'] = this.form.filter + " : " + " : " + this.searchfilterEmailMoreOption.join(",  and ")
                        }else{
                            this.form.filterConditionsArray[i]['textConditionLabel'] = this.form.filter + " : " + " : " + this.searchfilterEmailMoreOption.join(",  or ")
                        }

                        this.searchfilterEmailMoreOption = []
                        this.queryType = ""
                    }
                    this.form.filterText = ''
                    this.form.filter = ''
                    this.form.dropdown = ''
                    this.filter = false
                    this.filterInput = false
                    this.filterDropdown = false
                    this.filterDateRange = false
                    this.filterBtn = true
                    this.filterUpdateBtn = false
                    this.getDatasets(1)
                }
            }
        },
        removeFilter(index){
            this.form.filterConditionsArray.splice(index, 1)
            this.getDatasets(1);
        },        
        dateFormat(classes, date) {
            if(!classes.disabled) {
               // classes.disabled = date.getTime() > new Date()
            }
            return classes
        },
        MumberFormated(numbr) {
            return this.$options.filters.phoneFormatting(numbr);
        },
        myDateFormat(txt, val) {
            return txt+' '+this.$options.filters.convertInDayMonth(val)+' ago';
        },
        getDatasets(page) {
            this.loader = true;
            this.$Progress.start();  
            this.form.page = page
            this.form.post('/api/dataset-values-data').then((response) => {                
                this.records = response.data;
                this.totalRecords = response.data.total;                
                this.$Progress.finish();               
                this.totalNumberOfRecords = response.data.total;
                this.loader = false;
            });
        },
        getFilterData(){
            this.form.sortType = 'outreach_touched_at'
            this.form.sortBy = 'asc'
            this.totalNumberOfRecords = '-';    
            this.getDatasets(1);
        },
    },
    beforeMount() {
        if(this.datasets == '') {
           this.$store.dispatch('setDatasets');
        }
    },
    mounted() {
        this.getDatasets(1);
        if(this.filterItems == '') {
           this.$store.dispatch('setDatasetFilter');
        }
    }
}
</script>
<style>
    .pointer-hand{
        cursor: pointer;
    }
    .border-none{
        border:none !important;
        margin-right:3px;
    }
</style>