<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Models\Stages;
use App\Models\Contacts;
use App\Models\ContactCustoms;
use App\Models\OutreachMailings;
use App\Models\FivenineCallLogs;

class TestController extends Controller
{
    public function __construct()
    {
       // $this->middleware('auth');
    }

    public function testing($value='')
    {
        $contacts = [130,131,132,133,138,139,140,141,142,143,144,145,147,149,155,157,158,159,166,167,170,171,172,173,176,177,179,181,183,184,186,187,188,189,190,191,193,194,196,197,199,201,203,207,209,212,213,216,217,218,219,220,221,222,224,225,226,227,228,229,232,233,234,235,237,238,239,242,244,247,248,251,252,254,255,256,260,261,266,267,268,269,270,272,273,274,275,278,280,282,283,285,286,287,288,290,292,294,296,297,298,300,301,304,305,306,309,310,311,313,314,315,316,317,318,321,323,324,325,326,329,334,335,337,338,341,343,345,346,347,350,351,353,356,357,363,364,366,368,371,374,375,380,381,382,383,384,386,388,394,395,396,397,405,410,414,426,433,434,435,439,440,444,447,449,452,454,456,459,460,461,462,464,465,466,467,471,475,477,479,481,482,483,484,487,489,491,650,651,652,655,656,657,658,659,660,662,663,664,666,668,669,670,671,672,673,674,675,676,677,678,679,681,682,683,684,685,686,687,689,690,691,764,766,780,810,814,815,816,819,822,823,824,830,832,833,834,840,2447,2996,3001,3005,3015,3018,3046,7156,7163,7166,7171,7172,7191,7193,7195,7196,7197,7201,7202,7206,7207,7211,7215,7222,7229,7231,7232,7236,7237,7241,7248,7249,7257,7258,7262,7264,7265,7266,7272,7273,7276,7278,7281,7288,7289,7290,7295,7297,7301,7345,7577,8753,8755,8757,8759,8760,8761,8763,8770,8772,8776,8779,8780,8783,8784,8786,8787,8789,8797,8801,8803,8809,8810,8812,8813,8817,8818,8819,8820,8823,8825,8831,8833,8835,8836,8839,8841,8843,8845,8846,8847,8849,8852,8856,8860,8865,8868,8869,8872,8873,8874,8876,8877,8879,8880,8881,8883,8887,8888,8890,8892,8894,8896,8900,8902,8904,8907,8909,8910,8911,8913,8918,8924,8926,8927,8928,8929,8930,8931,8932,8934,8935,8938,8939,8940,8942,8943,8945,8946,8947,8948,8954,8958,8959,8961,8963,8966,8969,8970,8971,8974,8975,8982,8984,8985,8986,8991,8993,8994,8997,8998,8999,9001,9009,9011,9012,9013,9014,9016,9017,9019,9021,9022,9024,9029,9030,9036,9037,9043,9044,9046,9047,9048,9050,9051,9052,9059,9061,9065,9075,9080,9082,9085,9088,9089,9091,9092,9093,9096,9099,9101,9104,9105,9111,9112,9114,9115,9121,9122,9124,9125,9127,9132,9134,9135,9136,9137,9140,9142,9143,9144,9146,9147,9150,9152,9153,9156,9158,9161,9166,9167,9168,9169,9173,9174,9180,9182,9183,9187,9188,9189,9190,9193,9195,9199,9201,9202,9205,9211,9213,9214,9215,9218,9222,9224,9226,9227,9229,9230,9233,9236,9237,9240,9245,9341,9386,9959,9961,9965,9978,9981,9985,9991,9997,9999,10010,10013,10019,10031,10034,10036,10038,10039,10042,10047,10048,10058,10059,10067,10069,10072,10076,10092,10105,10110,10119,10120,10136,10148,10156,10163,10165,10166,10179,10180,10182,10184,10187,10199,10205,10213,10217,10218,10219,10225,10242,10247,10251,10257,10266,10278,10282,10285,10288,10308,10313,10351,10394,10395,10397,10398,10404,10407,10414,10432,10442,10462,10467,10473,10487,10502,10519,10521,10533,10536,10538,10539,10543,10552,10558,10562,10563,10567,10583,10590,10592,10619,10644,10650,10655,10656,10680,10691,10694,10699,10718,10739,10741,10760,10784,10799,10812,10816,10820,43073,43081,43087,43167,43168,43169,43171,43172,43173,43175,43176,43179,43181,43182,43183,43187,43188,43191,43192,43195,43197,43199,43200,43203,43204,43205,43206,43207,43210,43214,43216,43222,43224,43225,43227,43236,43237,43238,43239,43240,43241,43243,43244,43246,43253,43254,43256,43257,43261,43262,43263,43264,47799,47801,47802,47821,47828,47829,47832,47834,47836,47837,47838,47844,47845,47848,47856,47860,47861,47865,47867,47870,47872,47875,47876,47878,47886,47887,47888,47889,47897,47898,47899,47900,47901,47903,47907,47910,47911,47912,47913,47917,47921,47922,47924,47927,47928,47931,47932,47934,47935,47936,47937,47939,47940,47941,47943,47944,47945,47948,47953,47954,47957,47960,47962,47963,47965,47969,47974,47976,47978,47981,47982,47985,47987,47991,47994,47995,47999,48001,48002,48003,48005,48007,48009,48018,48020,48021,48031,48032,48033,48035,48036,48037,48038,48039,48040,48042,48043,48046,48049,48051,48052,48053,48054,48956,48977,48998,49021,49031,49038,49042,49043,49045,49046,49047,49048,49049,49051,49052,49053,49056,49057,49058,49059,49060,49061,49063,49064,49065,49069,49070,49071,49072,49073,49074,49077,49079,49080,49081,49082,49083,49084,49085,49087,49088,49090,49091,49092,49095,49111,49112,49113,49114,49115,49116,49117,49119,49120,49121,49122,49126,49127,49514,50016];
        echo '<pre>';
        var_dump($contacts); die;

       
        die;
    }

    public function emailCounter($nom = 1)
    {
        ini_set('max_execution_time', 3600);
        $last = $nom+299;
        if($nom > 50100){
            echo 'all done'; die;
        }
        $contacts = Contacts::where('record_id', '>=', $nom)->where('record_id', '<=', $last)->get();
        foreach ($contacts as $key => $contact) {
            $totalmattempt = FivenineCallLogs::where('record_id', $contact->record_id)->where('dial_attempts', '>=', 1)->where('dnis', $contact->number1)->sum('dial_attempts');
            $totalhattempt = FivenineCallLogs::where('record_id', $contact->record_id)->where('dial_attempts', '>=', 1)->where('dnis', $contact->number3)->sum('dial_attempts');
            $totaldattempt = FivenineCallLogs::where('record_id', $contact->record_id)->where('dial_attempts', '>=', 1)->where('dnis', $contact->number2)->sum('dial_attempts');

            $totalmreceived = FivenineCallLogs::where('record_id', $contact->record_id)->where('call_received', 1)->where('dial_attempts', '>=', 1)->where('dnis', $contact->number1)->count();
            $totalhqreceived = FivenineCallLogs::where('record_id', $contact->record_id)->where('call_received', 1)->where('dial_attempts', '>=', 1)->where('dnis', $contact->number3)->count();
            $totaldreceived = FivenineCallLogs::where('record_id', $contact->record_id)->where('call_received', 1)->where('dial_attempts', '>=', 1)->where('dnis', $contact->number2)->count();
      
            $contact->update(['mcall_attempts' => $totalmattempt,
                        'hcall_attempts' => $totalhattempt,
                        'wcall_attempts' => $totaldattempt,
                        'mcall_received' => $totalmreceived,
                        'hcall_received' => $totalhqreceived,
                        'wcall_received' => $totaldreceived]);
            
        }
        return view('csync')->with(compact('last'));
        
    }

    public function calculate(Request $request)
    {
        $stages = Stages::get();
        if($request->isMethod('post')) 
        {
            $ed = $request->ed;
            $eo = $request->eo;
            $ec = $request->ec;
            $ct = $request->ct;
            $cr = $request->cr;
            $cwt = $request->cwt;
            $cwr = $request->cwr;
            $d = $request->d;

            $set = ['Unknown Group', 'Cold Lead', 'Semi-Cold Lead', 'Warm Lead', 'Semi-Hot Lead', 'Hot Lead'];
            
            if($ed == 0 || $ed == '') { 
                $condition1 = 0;
                $condition2 = 0;
            }
            else {
                $condition2 = round($ec*100/$ed, 0);
                $condition1 = round($eo*100/$ed, 0);
            } 

            if($ct == 0 || $ct == '') { 
                $condition3 = 0;
            }
            else {
                $condition3 = round($cr*100/$ct, 0);
            } 

            if($cwt == 0 || $cwt == '') { 
                $condition4 = 0;
            }
            else {
                $condition4 = round($cwr*100/$cwt, 0);
            } 

            $score = round(($condition1+$condition2+$condition3+$condition4)*100/400);
            $t = round($score/20);
            $g = $set[$t];
            if($t == 0) {
                $label = 0000;
            } else {
                $label = $this->__calculateLabel($t, $condition1, $condition2, $condition3, $condition4);
            }
            
            $pdata = $request;
            return view('test')->with(compact('stages', 'g', 'score', 'label', 'pdata'));
        }
        return view('test')->with(compact('stages'));
    }

    private function __calculateLabel($k, $c1, $c2, $c3, $c4)
    {
        $label = '';
        $set = ['',
                ['c1' =>49, 'c2' =>19, 'c3' =>19, 'c4' =>23],
                ['c1' =>50, 'c2' =>20, 'c3' =>20, 'c4' =>25],
                ['c1' =>60, 'c2' =>35, 'c3' =>35, 'c4' =>50],
                ['c1' =>70, 'c2' =>50, 'c3' =>50, 'c4' =>75],
                ['c1' =>90, 'c2' =>70, 'c3' =>70, 'c4' =>90]     
        ];
        if($k == 1) {
            if($c1 <= $set[$k]['c1']) $label.='1'; else $label.='0';
            if($c2 <= $set[$k]['c2']) $label.='1'; else $label.='0';
            if($c3 <= $set[$k]['c3']) $label.='1'; else $label.='0';
            if($c4 <= $set[$k]['c4']) $label.='1'; else $label.='0';
            return $label;
        } else {
            if($c1 >= $set[$k]['c1']) $label.='1'; else $label.='0';
            if($c2 >= $set[$k]['c2']) $label.='1'; else $label.='0';
            if($c3 >= $set[$k]['c3']) $label.='1'; else $label.='0';
            if($c4 >= $set[$k]['c4']) $label.='1'; else $label.='0';
            return $label;
        }
    }

}